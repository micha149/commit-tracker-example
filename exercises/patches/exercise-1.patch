diff --git a/scripts/app.js b/scripts/app.js
index ec87a64..f5d232b 100644
--- a/scripts/app.js
+++ b/scripts/app.js
@@ -6,6 +6,7 @@
 import StorageService from './services/storage.js';
 import * as DateUtils from './utils/dateUtils.js';
 import TaskForm from './components/taskForm.js';
+import TaskList from './components/taskList.js';
 
 // Wait for the DOM to be fully loaded before executing code
 document.addEventListener('DOMContentLoaded', function() {
@@ -24,6 +25,10 @@ function initApp() {
 
     // Initialize components
     TaskForm.init();
+    TaskList.init();
+
+    // Make TaskForm available globally for the TaskList component
+    window.TaskForm = TaskForm;
 
     // Log the number of tasks
     const tasks = StorageService.getTasks();
diff --git a/scripts/components/taskList.js b/scripts/components/taskList.js
index 28bb371..d345c46 100644
--- a/scripts/components/taskList.js
+++ b/scripts/components/taskList.js
@@ -1,8 +1,194 @@
 /**
  * Task List Component for CommitTracker
  * Handles rendering and interaction with the task list
- * This file will be expanded in future commits
  */
 
-// Placeholder for the task list component
-// Will be implemented in future commits
+import StorageService from '../services/storage.js';
+import * as DateUtils from '../utils/dateUtils.js';
+
+/**
+ * TaskList component
+ */
+const TaskList = {
+    taskListElement: null,
+    tasks: [],
+
+    /**
+     * Initialize the task list
+     */
+    init() {
+        this.taskListElement = document.getElementById('task-list');
+        this.loadTasks();
+        this.renderTasks();
+
+        // Event listeners for task updates
+        document.addEventListener('task-created', this.handleTaskCreated.bind(this));
+        document.addEventListener('task-updated', this.handleTaskUpdated.bind(this));
+
+        console.log('Task list initialized');
+    },
+
+    /**
+     * Load tasks from storage
+     */
+    loadTasks() {
+        this.tasks = StorageService.getTasks();
+    },
+
+    /**
+     * Render tasks in the task list
+     */
+    renderTasks() {
+        // Clear the task list
+        this.taskListElement.innerHTML = '';
+
+        // If no tasks, show a message
+        if (this.tasks.length === 0) {
+            this.taskListElement.innerHTML = `
+                <div class="task-placeholder">
+                    <p>No tasks yet. Create your first task above!</p>
+                </div>
+            `;
+            return;
+        }
+
+        // Create a task element for each task
+        this.tasks.forEach(task => {
+            const taskElement = this.createTaskElement(task);
+            this.taskListElement.appendChild(taskElement);
+        });
+    },
+
+    /**
+     * Create a DOM element for a task
+     * @param {Object} task - The task object
+     * @returns {HTMLElement} The task element
+     */
+    createTaskElement(task) {
+        const taskElement = document.createElement('div');
+        taskElement.className = `task-item ${task.completed ? 'completed' : ''}`;
+        taskElement.dataset.id = task.id;
+
+        // Format the due date
+        const dueDateFormatted = task.dueDate ? DateUtils.formatDate(task.dueDate) : 'No due date';
+        const isOverdue = !task.completed && task.dueDate && DateUtils.isDateInPast(task.dueDate);
+
+        // Create the task content
+        taskElement.innerHTML = `
+            <div class="task-header">
+                <div class="task-title-container">
+                    <input type="checkbox" class="task-complete-checkbox" ${task.completed ? 'checked' : ''}>
+                    <h3 class="task-title">${task.title}</h3>
+                </div>
+                <div class="task-actions">
+                    <button class="btn-icon edit-task" title="Edit Task">
+                        <span class="icon">‚úèÔ∏è</span>
+                    </button>
+                    <button class="btn-icon delete-task" title="Delete Task">
+                        <span class="icon">üóëÔ∏è</span>
+                    </button>
+                </div>
+            </div>
+            <div class="task-details">
+                ${task.description ? `<p class="task-description">${task.description}</p>` : ''}
+                <div class="task-meta">
+                    <span class="task-category">${task.category}</span>
+                    <span class="task-priority priority-${task.priority}">${task.priority}</span>
+                    <span class="task-due-date ${isOverdue ? 'overdue' : ''}">${dueDateFormatted}</span>
+                </div>
+            </div>
+        `;
+
+        // Add event listeners
+        const checkbox = taskElement.querySelector('.task-complete-checkbox');
+        checkbox.addEventListener('change', () => this.handleTaskToggle(task.id));
+
+        const editButton = taskElement.querySelector('.edit-task');
+        editButton.addEventListener('click', () => this.handleTaskEdit(task.id));
+
+        const deleteButton = taskElement.querySelector('.delete-task');
+        deleteButton.addEventListener('click', () => this.handleTaskDelete(task.id));
+
+        return taskElement;
+    },
+
+    /**
+     * Handle toggling a task's completion status
+     * @param {string} taskId - The ID of the task to toggle
+     */
+    handleTaskToggle(taskId) {
+        const updatedTask = StorageService.toggleTaskCompletion(taskId);
+
+        if (updatedTask) {
+            // Find the task in the array and update it
+            const index = this.tasks.findIndex(task => task.id === taskId);
+            if (index !== -1) {
+                this.tasks[index] = updatedTask;
+            }
+
+            // Update the UI
+            this.renderTasks();
+        }
+    },
+
+    /**
+     * Handle deleting a task
+     * @param {string} taskId - The ID of the task to delete
+     */
+    handleTaskDelete(taskId) {
+        if (confirm('Are you sure you want to delete this task?')) {
+            const deleted = StorageService.deleteTask(taskId);
+
+            if (deleted) {
+                // Remove the task from the array
+                this.tasks = this.tasks.filter(task => task.id !== taskId);
+
+                // Update the UI
+                this.renderTasks();
+            }
+        }
+    },
+
+    /**
+     * Handle editing a task
+     * @param {string} taskId - The ID of the task to edit
+     */
+    handleTaskEdit(taskId) {
+        // This will use the TaskForm component to edit the task
+        // We'll assume TaskForm has a loadTaskForEdit method
+        if (window.TaskForm) {
+            window.TaskForm.loadTaskForEdit(taskId);
+        } else {
+            console.error('TaskForm component not available globally');
+        }
+    },
+
+    /**
+     * Handle task created event
+     * @param {CustomEvent} event - The task created event
+     */
+    handleTaskCreated(event) {
+        // Add the new task to the array
+        this.tasks.push(event.detail);
+
+        // Update the UI
+        this.renderTasks();
+    },
+
+    /**
+     * Handle task updated event
+     * @param {CustomEvent} event - The task updated event
+     */
+    handleTaskUpdated(event) {
+        // Find the task in the array and update it
+        const index = this.tasks.findIndex(task => task.id === event.detail.id);
+        if (index !== -1) {
+            this.tasks[index] = event.detail;
+        }
+
+        // Update the UI
+        this.renderTasks();
+    }
+};
+
+export default TaskList;
diff --git a/scripts/utils/dateUtils.js b/scripts/utils/dateUtils.js
index 519bba2..cb66241 100644
--- a/scripts/utils/dateUtils.js
+++ b/scripts/utils/dateUtils.js
@@ -29,6 +29,18 @@ export function formatDate(dateString, options = {}) {
     return new Intl.DateTimeFormat('en-US', mergedOptions).format(date);
 }
 
+/**
+ * Normalize a date by removing the time component
+ * @param {Date|string} date - Date object or ISO date string
+ * @returns {Date} Normalized date with time set to 00:00:00
+ * @private
+ */
+function normalizeDate(date) {
+    const dateObj = date instanceof Date ? date : new Date(date);
+    dateObj.setHours(0, 0, 0, 0);
+    return dateObj;
+}
+
 /**
  * Check if a date is in the past
  * @param {string} dateString - ISO date string
@@ -37,15 +49,10 @@ export function formatDate(dateString, options = {}) {
 export function isDateInPast(dateString) {
     if (!dateString) return false;
 
-    const date = new Date(dateString);
-    const today = new Date();
-
-    // Reset time part for comparison
-    today.setHours(0, 0, 0, 0);
-    const compareDate = new Date(date);
-    compareDate.setHours(0, 0, 0, 0);
+    const date = normalizeDate(new Date(dateString));
+    const today = normalizeDate(new Date());
 
-    return compareDate < today;
+    return date < today;
 }
 
 /**
@@ -56,12 +63,10 @@ export function isDateInPast(dateString) {
 export function isDateToday(dateString) {
     if (!dateString) return false;
 
-    const date = new Date(dateString);
-    const today = new Date();
+    const date = normalizeDate(new Date(dateString));
+    const today = normalizeDate(new Date());
 
-    return date.getDate() === today.getDate() &&
-           date.getMonth() === today.getMonth() &&
-           date.getFullYear() === today.getFullYear();
+    return date.getTime() === today.getTime();
 }
 
 /**
diff --git a/styles/components/task-controls.css b/styles/components/task-controls.css
index 8329e4f..750df1a 100644
--- a/styles/components/task-controls.css
+++ b/styles/components/task-controls.css
@@ -1,8 +1,35 @@
 /*
  * Task Controls Component Styles
+ * Controls for filtering and sorting tasks
  */
 
-.task-filters, .task-sort {
+/* Filter and sort containers */
+.task-filters,
+.task-sort {
     display: flex;
     gap: 0.5rem;
+    align-items: center;
+}
+
+/* Filter label */
+.filter-label {
+    font-size: 0.9rem;
+    font-weight: 600;
+    color: #555;
+    margin-right: 0.25rem;
+}
+
+/* Sort options */
+.sort-option {
+    padding: 0.25rem 0.5rem;
+    border-radius: 4px;
+    background-color: #f0f0f0;
+    cursor: pointer;
+    font-size: 0.8rem;
+    transition: background-color 0.2s;
+}
+
+.sort-option:hover,
+.sort-option.active {
+    background-color: #e0e0e0;
 }
diff --git a/styles/components/task-list.css b/styles/components/task-list.css
index 3fa42f5..fa56454 100644
--- a/styles/components/task-list.css
+++ b/styles/components/task-list.css
@@ -4,6 +4,9 @@
 
 .task-list {
     margin-top: 1.5rem;
+    display: flex;
+    flex-direction: column;
+    gap: 1rem;
 }
 
 .task-placeholder {
@@ -12,3 +15,115 @@
     align-items: center;
     justify-content: center;
 }
+
+.task-item {
+    background-color: white;
+    border-radius: 6px;
+    border: 1px solid #e0e0e0;
+    padding: 1rem;
+    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
+    transition: box-shadow 0.3s, transform 0.2s;
+}
+
+.task-item:hover {
+    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
+    transform: translateY(-2px);
+}
+
+.task-item.completed {
+    background-color: #f9f9f9;
+    border-color: #e0e0e0;
+}
+
+.task-item.completed .task-title {
+    text-decoration: line-through;
+    color: #888;
+}
+
+.task-header {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    margin-bottom: 0.5rem;
+}
+
+.task-title-container {
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+}
+
+.task-title {
+    margin: 0;
+    font-size: 1.1rem;
+    color: #333;
+}
+
+.task-actions {
+    display: flex;
+    gap: 0.5rem;
+}
+
+.btn-icon {
+    background: none;
+    border: none;
+    cursor: pointer;
+    padding: 0.25rem;
+    border-radius: 4px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    transition: background-color 0.2s;
+}
+
+.btn-icon:hover {
+    background-color: #f0f0f0;
+}
+
+.task-details {
+    margin-left: 1.5rem;
+}
+
+.task-description {
+    margin: 0.5rem 0;
+    color: #555;
+    font-size: 0.9rem;
+}
+
+.task-meta {
+    display: flex;
+    gap: 1rem;
+    margin-top: 0.5rem;
+    font-size: 0.8rem;
+}
+
+.task-category, .task-priority, .task-due-date {
+    padding: 0.25rem 0.5rem;
+    border-radius: 4px;
+    background-color: #f0f0f0;
+}
+
+.task-category {
+    background-color: #e3f2fd;
+    color: #1976d2;
+}
+
+.priority-high {
+    background-color: #ffebee;
+    color: #c62828;
+}
+
+.priority-medium {
+    background-color: #fff8e1;
+    color: #ff8f00;
+}
+
+.priority-low {
+    background-color: #e8f5e9;
+    color: #388e3c;
+}
+
+.task-due-date.overdue {
+    background-color: #ffebee;
+    color: #c62828;
+}
